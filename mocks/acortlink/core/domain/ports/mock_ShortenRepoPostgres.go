// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "acortlink/core/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ShortenRepoPostgres is an autogenerated mock type for the ShortenRepoPostgres type
type ShortenRepoPostgres struct {
	mock.Mock
}

// AddContToQuerysUrl provides a mock function with given fields: ctx, id
func (_m *ShortenRepoPostgres) AddContToQuerysUrl(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AddContToQuerysUrl")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, url
func (_m *ShortenRepoPostgres) Save(ctx context.Context, url models.URLCreate) error {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.URLCreate) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchUrl provides a mock function with given fields: ctx, path
func (_m *ShortenRepoPostgres) SearchUrl(ctx context.Context, path string) (models.URLResponse, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for SearchUrl")
	}

	var r0 models.URLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.URLResponse, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.URLResponse); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(models.URLResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShortenRepoPostgres creates a new instance of ShortenRepoPostgres. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShortenRepoPostgres(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShortenRepoPostgres {
	mock := &ShortenRepoPostgres{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
